?power.t.test
?pnorm
qnorm(0.9)
pnorm(1.281, lower.tail = FALSE)
z = qnorm(0.9)
z
z = qnorm(0.9)
z
n = 2 * 0.04 * 0.04 * 0.01 * 0.01 /z^2
n
n = 100 * z^2 * 2 * 0.04 * 0.04
n
qnorm(0.95)
?power.t.test
?qnormt
?qnorm
qnorm(0.95)
qnorm(0.90)
pt(0.24, 4 lower.tail=FALSE)
pt(0.25, 4, lower.tail=FALSE)
pt(0.75, 4, lower.tail=FALSE)
pt(0.25, lower.tail=FALSE)
pt(0.25, 4, lower.tail=FALSE)
qt(0.975, 16)
n1 = 9
n2 = 9
s1 = 1.8 # Placebo
s2 = 1.5 # Treatment
x1 = 1 # placebo gr mean difference
x2 = -3 # tretement gr mean difference
ts = (x2 - x1)/sqrt( (s1^2/n1) + (s2^2/n2) )
ts
pval = 2 * pt(ts, 16, lower.tail = FALSE)
pval
ts = (x1 - x2)/sqrt( (s1^2/n1) + (s2^2/n2) )
t
ts
pval = 2 * pt(ts, 16, lower.tail = FALSE)
pval
z = qnorm(0.9)
z
z = pnorm(0.9)
z
n = 2 * 0.04 * 0.04 * 0.01 * 0.01 /z^2
n
n = 100 * z^2 * 2 * s^2
n
s
md = 0.01 ## mean difference
s = 0.04
pval = 0.9
## Let us find out z
z = pnorm(0.9)
z
n = 100 * z^2 * 2 * s^2
n
library(caret)
install.packages('caret')
library(caret)
library(kernlab)
data(spam)
names(spam)
head(spam)
dim(spam)
X = 0.71 * num415 + 0.71 * num857
X = 0.71 * spam$num415 + 0.71 * spam$num857
head(X)
head(spam$415)
head(spam$numk415)
head(spam$num415)
Y = 0.71 * spam$num415 - 0.71 * spam$num857
plot(X,y)
plot(X,Y)
Y
print(Y>0)
X
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages('AppliedPredictivModeling')
install.packages('AppliedPredictiveModeling')
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(predictors)
dim(adData)
dim(AlzheimerDisease)
names(adData)
adData1 = data.frame(diagnosis,predictors)
dim(adData1)
names(adData1)
adData = data.frame(diagnosis,predictors)
testIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
testIndex
size(testIndex)
dim(testIndex)
size(adData)
dim(adData)
training = adData[-testIndex,]
dim(training)
head(training)
testing = adData[testIndex,]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
trainIndex
dim(predictors)
dim(diagnosis)
diagnosis
?createDataPartition
diagnosis
adData = data.frame(diagnosis,predictors)
train = createDataPartition(diagnosis, p = 0.50,list=FALSE)
test = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(train)
head(train)
head(test)
adData1 = data.frame(diagnosis,predictors)
testIndex1 = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex1,]
testing1 = adData1[testIndex1,]
adData1 = data.frame(diagnosis,predictors)
testIndex1 = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex1,]
testing1 = adData1[testIndex1,]
dim(adData1)
adData4 = data.frame(predictors)
trainIndex4 = createDataPartition(diagnosis,p=0.5,list=FALSE)
training4 = adData[trainIndex4,]
testing4 = adData[-trainIndex4,]
dim(adData4)
data(concrete)
dim(concree)
dim(concree
dim(concree)
dim(concrete)
names(concrete)
mixtures
dim(mixtures)
dim(concrete)
names(concrete)
names(mixtures)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
dim(inTrain)
dim(training)
dim(testing)
head(cement)
head(concrete
)
head(mixtures)
mixtures[,0]
index(mixtures)
names(mixtures)
a=names(mixtures)
a
a[1]
a - a[9]
a[-9]
featurePlot(x=training[,names(training)[-9]], y = training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c('Cement', 'Water', 'Age'), y = training$CompressiveStrength, plot="pairs")
featurePlot(x=training[,c('Cement', 'Water', 'Age')], y = training$CompressiveStrength, plot="pairs")
plot(mixtures$CompressiveStrength, pch=19)
qplot(mixtures$CompressiveStrength, colour='Age', data=mixtures)
?qplot
?rownumber
??rownumber
?rownum
plot(mixtures$CompressiveStrength, pch=19, colour='Age')
plot(mixtures$CompressiveStrength, pch=19, col='Age')
?plot
?qplot
qplot(y=mixtures$CompressiveStrength, data=mixtures)
qplot(y=mixtures$CompressiveStrength, data=mixtures, colour='Age')
mixtures$Age
str(mixtures$Age)
str(mixtures)
summary(mixtures)
mixtures$Age
cut(mixtures$Age, breaks = 4, labels = c("VeryNew", "New", "Old", "VeryOld"))
mixtures$AgeFactor = cut(mixtures$Age, breaks = 4, labels = c("VeryNew", "New", "Old", "VeryOld"))
dim(mixtures)
qplot(y=mixtures$CompressiveStrength, data=mixtures, colour='AgeFactor')
qplot(y=mixtures$CompressiveStrength, data=mixtures, colour='mixtures$AgeFactor')
mixtures$AgeFactor
qplot(y=mixtures$CompressiveStrength, data=mixtures, colour='mixtures$AgeFactor')
data(mtcars)
dim(mtcars)
names(mtcars)
str(mtcars)
library(ISLR)
install.packages('ISLR')
library(ISLR)
data(wage)
data(Wage)
summary(Wage)
dim(wage)
dim(Wage)
names(Wage)
Wage$ageFactor = cut(Wage$Age, breaks=4, labels=c('Junior', 'YoungAdut', 'Adut', 'Senior'))
Wage$ageFactor = cut(Wage$age, breaks=4, labels=c('Junior', 'YoungAdut', 'Adut', 'Senior'))
head(Wage)
qplot(y=Wage$wage, data=Wage, colour='Wage$AgeFactor')
qplot(y=Wage$wage, data=Wage, colour=Wage$AgeFactor)
qplot(y=Wage$wage, data=Wage, colour='Wage$AgeFactor')
qplot(y=Wage$wage, data=Wage, colour=AgeFactor)
qplot(y=Wage$wage, data=Wage, colour=ageFactor)
qplot(y=Wage$wage, data=Wage, colour=ageFactor+education)
qplot(y=Wage$wage, data=Wage, colour=education)
names(mixtures)
qplot(y=mixtures$CompressiveStrength, data=mixtures)
qplot(y=mixtures$CompressiveStrength, data=mixtures, colour=AgeFactor)
names(mixtures)
qplot(y=CompressiveStrentgh, data=mixtures)
qplot(y=mixtures$CompressiveStrentgh, data=mixtures)
qplot(y=mixtures$CompressiveStrength, data=mixtures)
qplot(y=mixtures$CompressiveStrentgh, data=mixtures)
qplot(y=mixtures$CompressiveStrength, data=mixtures)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
## Outcome versus index plot for the whole data set
qplot(y=mixtures$CompressiveStrength, data=mixtures)
qplot(y=trainig$CompressiveStrength, data=training)
# Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
qplot(y=training$CompressiveStrength, data=training)
# Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
names(training)
str(training)
training$FlyAsh
fl1 = as.factor(training$FlyAsh)
fl1
training$FlyAsh
summary(training)
training$Cmn.Fct = cut(training$Cement, breaks=4, labels=c('L1-Cmn', 'L2-Cmn', 'L3-Cmn', 'L4-Cmn'))
head(training)
qplot(y=training$CompressiveStrength, data=training, colour=Cmn.Fct)
# Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
training$BFS.Fct = cut(training$BlastFurnaceSlag, breaks=4, labels=c('L1-BFS', 'L2-BFS', 'L3-BFS', 'L4-BFS'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=BFS.Fct)
training$BFS.Fct = cut(training$BlastFurnaceSlag, breaks=4, labels=c('L1-BFS', 'L2-BFS', 'L3-BFS', 'L4-BFS'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=BFS.Fct)
training$Cmn.FlA = cut(training$FlyAsh, breaks=4, labels=c('L1-FlA', 'L2-FlA', 'L3-FlA', 'L4-FlA'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Cmn.FlA)
training$Wtr.Fct = cut(training$Water, breaks=4, labels=c('L1-Wtr', 'L2-Wtr', 'L3-Wtr', 'L4-Wtr'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Wtr.Fct)
training$Wtr.Fct = cut(training$Water, breaks=4, labels=c('L1-Wtr', 'L2-Wtr', 'L3-Wtr', 'L4-Wtr'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Wtr.Fct)
training$Spl.Fct = cut(training$Superplasticizer, breaks=4, labels=c('L1-Spl', 'L2-Spl', 'L3-Spl', 'L4-Spl'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Spl.Fct)
training$CAg.Fct = cut(training$CoarseAggregate, breaks=4, labels=c('L1-CAg', 'L2-CAg', 'L3-CAg', 'L4-CAg'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=CAg.Fct)
training$FAg.Fct = cut(training$FineAggregate, breaks=4, labels=c('L1-FAg', 'L2-FAg', 'L3-FAg', 'L4-FAg'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=FAg.Fct)
training$FAg.Fct = cut(training$FineAggregate, breaks=4, labels=c('L1-FAg', 'L2-FAg', 'L3-FAg', 'L4-FAg'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=FAg.Fct)
training$Age.Fct = cut(training$Age, breaks=4, labels=c('L1-Age', 'L2-Age', 'L3-Age', 'L4-Age'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Age.Fct)
qplot(y=training$CompressiveStrength, data=training, colour=Cmn.FlA)
corr(training$CompressiveStrength, training$FlyAsh)
?cor
cor(training$CompressiveStrength, training$FlyAsh)
plot(training$CompressiveStrength, training$FlyAsh)
plot(training$FlyAsh, training$CompressiveStrength)
plot(training$CompressiveStrength, training$Age)
cor(training$CompressiveStrength, training$Age)
plot(training$CompressiveStrength, training$Age)
abline(training$CompressiveStrength, training$Age)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
names(training)
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
?log
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist((-1) * log(training$Superplasticizer))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist((-1) * log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
#hist((-1) * log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
#hist((-1) * log(training$Superplasticizer))
hist(log(training$Superplasticizer+1))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist((-1) * log(training$Superplasticizer))
#hist(log(training$Superplasticizer+1))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
names(training)
?createDataPartition
SEL <-which(grepl("^IL|^diagnosis", colnames(training), ignore.case = T))
smTrain<-training[,SEL]
dim(smTrain)
colnames(smTrain)
?preprocess
?preProcess
head(smTrain)
str(smTrain)
res = preProcess(smTrain[,-1], method="pca", thresh=0.90)
Question 5
res
res[numComp]
res$numComp
colnames(smTrain)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
dim(training)
dim(testing)
res = preProcess(smTrain[,-1], method="pca", thresh=0.80)
res
res$call
res$dim
res$ica
res$numComp
res$thresh
res$method
res$rotation
?predict
trainPCA = predict(training$diagnosis, smTrain[-1])
trainPCA = predict(preProc, smTrain[-1])
preProc = preProcess(smTrain[,-1], method="pca", thresh=0.80)
trainPCA = predict(preProc, smTrain[-1])
preProc = preProcess(smTrain[,-1], method="pca", thresh=0.80)
trainPCA = predict(preProc, smTrain[-1])
head(preProc)
head(trainPCA)
preProc$rotation
modelFit = train(training$diagnosis ~ .,method="glm",data=trainPCA)
modelFit = train(training$diagnosis ~ .,method="glm",data=trainPCA)
install.packages('e1071')
library(e1071)
modelFit = train(training$diagnosis ~ .,method="glm",data=trainPCA)
modelFit
smTest=testing[,SEL]
dim(smTest)
colnames(smTest)
confusionMatrix(testing$diagnosis, predict(modelFit,testPCA))
testPCA = predict(preProc, smTest[-1])
head(testPCA)
confusionMatrix(testing$diagnosis, predict(modelFit,testPCA))
modelFit = train(training$diagnosis ~., data=training, method='glm')
modelFit
modelFitPCA
confusionMatrix(testing$diagnosis, predict(modelFit,testing))
modelFit = train(training$diagnosis ~., data=smTrain, method='glm')
modelFit
results1 = mean(testing$diagnosis == predict(modelFit, smTest))
results1
confusionMatrix(smTest$diagnosis, predict(modelFit,smTest))
preProc = preProcess(smTrain[,-1], method="pca", thresh=0.80)
trainPCA = predict(preProc, smTrain[-1])
modelFitPCA = train(training$diagnosis ~ .,method="glm",data=trainPCA)
testPCA = predict(preProc, smTest[-1])
results2 = mean(testing$diagnosis == predict(modelFitPCA, smTest))
results2
confusionMatrix(testing$diagnosis, predict(modelFitPCA,testPCA))
preProc = preProcess(smTrain[,-1], method="pca", thresh=0.80)
trainPCA = predict(preProc, smTrain[-1])
modelFitPCA = train(training$diagnosis ~ .,method="glm",data=trainPCA)
testPCA = predict(preProc, smTest[-1])
results2 = mean(testing$diagnosis == predict(modelFitPCA, testPCA))
results2
confusionMatrix(testing$diagnosis, predict(modelFitPCA,testPCA))
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData1 = data.frame(diagnosis,predictors)
testIndex1 = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training1 = adData1[-testIndex1,]
testing1 = adData1[testIndex1,]
dim(adData1)
dim(diagnosis)
dim(predictors)
dim(AlzheimerDisease)
dim(adData1)
adData4 = data.frame(predictors)
trainIndex4 = createDataPartition(diagnosis,p=0.5,list=FALSE)
dim(trainIndex4)
dim(trainIndex1)
testIndex1 = createDataPartition(diagnosis, p = 0.50,list=FALSE)
dim(trainIndex1)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
## Outcome versus index plot for the whole data set
qplot(y=mixtures$CompressiveStrength, data=mixtures)
## Outcome versus index plot for the whole training set
qplot(y=training$CompressiveStrength, data=training)
training$Cmn.Fct = cut(training$Cement, breaks=4, labels=c('L1-Cmn', 'L2-Cmn', 'L3-Cmn', 'L4-Cmn'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Cmn.Fct)
training$FAg.Fct = cut(training$FineAggregate, breaks=4, labels=c('L1-FAg', 'L2-FAg', 'L3-FAg', 'L4-FAg'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=FAg.Fct)
training$Age.Fct = cut(training$Age, breaks=4, labels=c('L1-Age', 'L2-Age', 'L3-Age', 'L4-Age'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Age.Fct)
training$Age.Fct = cut(training$Age, breaks=4, labels=c('L1-Age', 'L2-Age', 'L3-Age', 'L4-Age'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Age.Fct)
cor(training$CompressiveStrength, training$FlyAsh)
plot(training$CompressiveStrength, training$FlyAsh)
abline(training$CompressiveStrength, training$FlyAsh)
plot(training$CompressiveStrength, training$FlyAsh)
abline(training$CompressiveStrength, training$FlyAsh)
abline(training$CompressiveStrength, training$FlyAsh)
# Make a plot of the outcome (CompressiveStrength) versus the index of the samples.
abline(training$CompressiveStrength, training$FlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
par(mfrow=c(1,2))
hist(training$Superplasticizer)
hist(log(training$Superplasticizer))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
#hist((-1) * log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
par(mfrow=c(1,2))
hist(training$Superplasticizer)
#hist((-1) * log(training$Superplasticizer))
hist(log(training$Superplasticizer + 1))
training$Age.Fct = cut(training$Age, breaks=4, labels=c('L1-Age', 'L2-Age', 'L3-Age', 'L4-Age'))
## Plot CompressiveStrength and colour with cement levels.
qplot(y=training$CompressiveStrength, data=training, colour=Age.Fct)
cor(training$CompressiveStrength, training$Age)
par(mfrow=c(1,2))
hist(training$Superplasticizer)
#hist((-1) * log(training$Superplasticizer))
hist(log(training$Superplasticizer))
library(devtools)
install.packages('devtools')
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library('slidify')
setwd("d:\\prashant\\coursera-dsc\\ddp\\TSPG_App")
options(browser = "C:\\Users\\Administrator\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe")
runApp()
library(shiny)
runApp()
runApp()
